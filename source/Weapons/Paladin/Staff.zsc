
// The Cleric's Serpent Staff -----------------------------------------------

class PaladinStaff : weaponbase
{
	Default
	{
		Weapon.SelectionOrder 1600;
		//Weapon.AmmoUse1 6;
		//Weapon.AmmoGive1 25;
		Weapon.KickBack 150;
		Weapon.YAdjust 10;
       // +WEAPON.AMMO_OPTIONAL;
        //+WEAPON.ALT_AMMO_OPTIONAL;
        +Weapon.noalert
        +WEAPON.NOAUTOSWITCHTO;
		Weapon.AmmoType1 "Mana1";
		Inventory.PickupMessage "$TXT_WEAPON_C2";
		Tag "Serpent Staff";
	}

	States
	{
	Spawn:
		WCSS A -1;
		Stop;
	Select:
		CSSF C 1 A_Raise;
		Loop;
	Deselect:
		CSSF B 3;
		CSSF C 4;
		CSSF C 1 A_Lower;
		Wait;
	Ready:
		CSSF C 4;
		CSSF B 3 A_CStaffInitBlink;
    actualready:
		CSSF AAAAAAA 1 A_WeaponReady(WRF_ALLOWZOOM|WRF_ALLOWRELOAD);
		CSSF A 1 A_CStaffCheckBlink;
		Goto Ready + 2;
	Fire:
        //tnt1 a 0 a_checkattackresource(WAC_MAINATTACK,null,"OOMhold",WSC_NOMANA);
		CSSF A 1 Offset (0, 45) ;//A_CStaffCheck;
		CSSF J 1 Offset (0, 50)
        {
            a_alertmonsters();
            A_CStaffAttack();
        }
		CSSF J 2 Offset (0, 50);
		CSSF J 2 Offset (0, 45);
		CSSF A 2 Offset (0, 40);
		CSSF A 2 Offset (0, 36);
		tnt1 a 0 a_refire();
	Blink:
		CSSF BBBCCCCCBBB 1 A_WeaponReady(WRF_NOFIRE);
		Goto Ready + 2;

    altfire:
        tnt1 a 0 a_checkattackresource(WAC_THRESHOLD,null,"OOMhold",WSC_NOMANA);
        tnt1 a 0 a_jumpifinventory("Powerbitecooldown",1,"actualready");
        CSSF A 2 a_startsound("snekcharge");

		CSSF K 2 ;//Offset (0, 36);
        CSSF L 3 ;//Offset (0, 45);
        CSSF M 2 Offset (0, 50)
        {
            a_alertmonsters();
            a_startsound("snekbite");
            a_cstaffbite();
            //a_custompunch(random(40,80),true,CPF_PULLIN,"CStaffPuff",96,0.5);
            a_giveinventory("BiteCooldown",1);
            A_HandleResource(WAC_THRESHOLD);
        }
        CSSF M 2 Offset (0,45);
        CSSF A 1 Offset (0,40);
        CSSF A 1 Offset (0,36);
		//Goto Ready+2;
        goto blink;
    Zoom:
        tnt1 a 0
        {
            if(countinv("putrefactionaura") < 1)
            {
                takeinventory("fixationaura",1);
                giveinventory("putrauraitem",1);
            }
        }
        goto ready+2;
    Reload:
        tnt1 a 0 a_checkattackresource(WAC_ULTIMATE,null,"OOMhold",WSC_NOMANA);
        tnt1 a 0 a_jumpifinventory("PowerCorruptioncooldown",1,"actualready");
        CSCB ABBCCCCCC 1;
        CSCB D 2
        {
            if(countinv("putrefactionaura")>0) A_setblend("olivedrab3",.4,28);
        }
        CSCB E 2 BRIGHT
        {
             if(countinv("putrefactionaura") > 0)
             {
                A_setblend("olivedrab3",.8,18);
                a_startsound("corrupt");
                a_giveinventory("CorruptionCooldown",1);
            }
            else
            {
                a_startsound("corrupt2");
                a_giveinventory("CorruptionCooldownShort",1);
            }
            A_HandleResource(WAC_ULTIMATE);

        }
        tnt1 a 0 a_CStaffCorrupt(countinv("putrefactionaura") > 0);
        CSCB FFF 1 BRIGHT
        {
            a_light(-5);
        }
        CSCB EE 3 BRIGHT a_light0;
        CSCB D 3;
        CSCB GH 3;
        goto ready+2;
    OOMhold:
        CSSF A 1 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
        tnt1 a 0
        {
            if(PressingFire() || PressingAltfire() || PressingReload() || PressingZoom())
            {
                return resolvestate("OOMhold");
            }
            return resolvestate(null);
        }
		Goto Ready + 2;
	}

	//============================================================================
	//
	// A_CStaffCheck
	//
	//============================================================================

	action void A_StaffBite()
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}
		Weapon weapon = player.ReadyWeapon;

		int damage = random[StaffCheck](20, 35);
		int max = player.mo.GetMaxHealth();
		for (int i = 0; i < 3; i++)
		{
			for (int j = 1; j >= -1; j -= 2)
			{
				double ang = angle + j*i*(45. / 16);
				double slope = AimLineAttack(ang, 1.5 * DEFMELEERANGE, t, 0., ALF_CHECK3D);
				if (t.linetarget)
				{
					LineAttack(ang, 1.5 * DEFMELEERANGE, slope, damage, 'Melee', "CStaffPuff", false, t);
					if (t.linetarget != null)
					{
						angle = t.angleFromSource;
						if (((t.linetarget.player && (!t.linetarget.IsTeammate(self) || level.teamdamage != 0)) || t.linetarget.bIsMonster)
							&& (!t.linetarget.bDormant && !t.linetarget.bInvulnerable))
						{
							int newLife = player.health + (damage >> 3);
							newLife = newLife > max ? max : newLife;
							if (newLife > player.health)
							{
								health = player.health = newLife;
							}
							//if (weapon != null)
							//{
							//	State newstate = weapon.FindState("Drain");
							//	if (newstate != null) player.SetPsprite(PSP_WEAPON, newstate);
							//}
						}
						if (weapon != null)
						{
							weapon.DepleteAmmo(weapon.bAltFire, false);
						}
					}
					return;
				}
			}
		}
	}

	//============================================================================
	//
	// A_CStaffAttack
	//
	//============================================================================

	action void A_CStaffAttack()
	{
		if (player == null)
		{
			return;
		}

		Weapon weapon = player.ReadyWeapon;
		if (weapon != null)
		{
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}

		Actor mo = SpawnPlayerMissile ("SerpentStaffMissile", angle - 3.0);
		if (mo)
		{
			mo.WeaveIndexXY = 32;
		}
		mo = SpawnPlayerMissile ("SerpentStaffMissile", angle + 3.0);
		if (mo)
		{
			mo.WeaveIndexXY = 0;
		}
		A_StartSound ("ClericCStaffFire", CHAN_WEAPON);
	}

    action void A_CStaffBite()
    {
        if (player == null)
		{
			return;
		}
        Weapon weapon = player.ReadyWeapon;
		if (weapon != null)
		{
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}
        Actor mo = SpawnPlayerMissile ("SerpentStaffBiteMissile");
    }

    action void A_CStaffCorrupt(bool empowered)
    {
        if (player == null)
		{
			return;
		}
        FtranslatedLineTarget t;
        let distance = 960;
        class<Actor> puff = empowered?"Corruption":"corruption2";

        for(int i = 0;i < 16; i++)
        {
            for(int j = 1; j >=1; j-=2)
            {

                double ang = angle + j*i*(45.0/16);
                double slope = AimLineAttack(ang,distance,t,64.0,alf_check3d);
                if(t.linetarget != null && t.linetarget.bIsMonster && t.linetarget.findinventory("corruptionitem")==null)
                {
                    Lineattack(ang, distance,slope,0,'None',puff,LAF_NOIMPACTDECAL,t);
                    t.linetarget.giveinventory("CorruptionItem",1);
                    a_alertmonsters();
                    return;
                }
            }
        }
    }

	//============================================================================
	//
	// A_CStaffInitBlink
	//
	//============================================================================

	action void A_CStaffInitBlink()
	{
		weaponspecial = (random[CStaffBlink]() >> 1) + 20;
	}

	//============================================================================
	//
	// A_CStaffCheckBlink
	//
	//============================================================================

	action void A_CStaffCheckBlink()
	{
		if (player && player.ReadyWeapon)
		{
			if (!--weaponspecial)
			{
				player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.FindState ("Blink"));
				weaponspecial = (random[CStaffBlink]() + 50) >> 2;
			}
			else
			{
				A_WeaponReady();
			}
		}
	}
}

class powerCorruptionCooldown : powerup
{
    default
    {
        powerup.duration -60;
    }
}

class CorruptionCooldown : powerupGiver
{
    default
    {
        Powerup.Type "PowerCorruptionCooldown";
        +inventory.AUTOACTIVATE
    }
}


class powerCorruptionCooldownShort : powerup
{
    default
    {
        powerup.duration -40;
    }
}

class CorruptionCooldownShort : powerupGiver
{
    default
    {
        Powerup.Type "PowerCorruptionCooldownShort";
        +inventory.AUTOACTIVATE
    }
}

class powerBiteCooldown : Powerup
{
    default
    {
        powerup.duration -10;
    }
}

class BiteCooldown : Powerupgiver
{
    default
    {
        Powerup.Type "PowerBiteCooldown";
        +inventory.AUTOACTIVATE
    }
}


class corruption2 : corruption
{
    override void tick()
    {
        actor.Tick();
        if (!tracer || tracer.health < 1) return;
        else
        {
            A_Warp(AAPTR_TRACER, 2, 0, 32, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,null,0);
            if(gametic%35==0)
            {
                a_startsound("corrupthit2");
                a_spawnitemex("cstaffpuff");
                a_damagetracer(poisondamage,"poisoncloud",DMSS_FOILINVUL  ,null,"None",AAPTR_TARGET);
                poisondamage *= 1.5;
            }
        }
    }
}

class corruptsmoke : corruptsmoke2
{
    default
    {
        RenderStyle "add";
        scale 1.5;
        Translation "0:255=%[0,0,0]:[0,0.6,0]";
    }
}

class corruptionitem : inventory
{
    default
    {
        inventory.maxamount 1;
    }
    states
    {
        held:
        tnt1 a 560;
        stop;
    }
}

class corruption : actor
{
    int poisonDamage;
    bool firstTic;

    Override void PostBeginPlay()
    {
        Super.postbeginplay();
        poisonDamage = 5;
        firstTic = true;
    }

    default
    {
        +NOBLOCKMAP;
		+NOGRAVITY;
        +FORCEXYBILLBOARD;
        +PUFFONACTORS;
        +PUFFGETSOWNER;
        +HITTRACER;
        +forcepain;
        +BLOODLESSIMPACT;
    }

    override void tick()
    {
        Super.Tick();
        if (!tracer || tracer.health < 1) return;
        else
        {
            A_Warp(AAPTR_TRACER, 2, 0, 32, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,null,0);
            if(gametic%35==0)
            {
                a_startsound("corrupthit");
                a_spawnitemex("corruptsmoke");
                a_damagetracer(poisondamage,"poisoncloud",DMSS_FOILINVUL  ,null,"None",AAPTR_TARGET);
                poisondamage *= 1.5;
                if(!firstTic)
                    spreadCorruption();
                else
                    firstTic = false;
            }
        }
    }

    void spreadCorruption()
    {
        if (!tracer || tracer.health < 1) return;
        FtranslatedLineTarget t;
        let distance = 256;
        class<Actor> puff = "Corruption";
        int numrays = 160;
        double ang = 360.0;
        double vrange = 64.0;
        let monster_count = 2;

        for(int i = 0;i<numrays;i++)
        {
            if(monster_count < 1) return;
            double an = angle - ang / 2 + ang / numrays * i;
            tracer.AimLineAttack(an,distance,t,vrange,ALF_CHECK3D);
            if (t.linetarget != null && t.linetarget.findinventory("corruptionitem")==null && t.linetarget.bISMONSTER && t.linetarget !=tracer)
            {
                t.linetarget.giveinventory("corruptionitem",1);
                actor puff = Spawn(puff,t.linetarget.pos,ALLOW_REPLACE);

                if(puff !=null)
                {
                    if ((target.GetSpecies() == t.linetarget.GetSpecies()) ||
					target == t.linetarget)
					{
						puff.Destroy();
						continue;
					}
                    puff.target = target;
                    puff.tracer = t.linetarget;
                    monster_count--;
                }
            }

        }
    }

    states
    {
        spawn:
            tnt1 a 280;
            stop;
    }
}

class corruptsmoke2 : cstaffpuff {}


class SerpentStaffBiteMissile : FastProjectile
{
    default
    {
        Radius 12;
        Height 10;
        Speed 66;
        DamageFunction (random(30,60));
        Projectile;
        RenderStyle "Add";
        //Translation "Green";
        //Translation "0:255=%[0,0,0]:[0,1,0]";
        scale 1.5;
        //SeeSound "weapons/bowshoot"
        //DeathSound "weapons/bowhit"
    }
    states
    {
        Spawn:
            FX03 A 1 Bright;
            Loop;
        XDeath:
            tnt1 a 0
            {
                a_spawnitemex("CStaffPuff");
                a_damagetarget(-1*getmissiledamage(0,1)/2.0);
                target.a_startsound("ClericCStaffHitThing",0,CHANF_OVERLAP );
            }
        Crash:
        Death:
            tnt1 a 0 a_startsound("clericcstaffexplode");
            CSSF FG 4 Bright;
            CSSF HI 3 Bright;
            Stop;
    }

}


class SerpentStaffMissile : CStaffMissile
{
    default
    {

        poisondamagetype "poisoncloud";
       // +forcepain;
        +additivepoisondamage
        damageFunction 8;
        Poisondamage 2,5;
    }

    states
    {
        XDeath:
            TNT1 a 0
            {
                if(target && target.player && target.player.readyweapon)
                {
                    WeaponBase(target.Player.Readyweapon).a_handleresource(WeaponBase.WAC_NONE);
                }
                if(countinv("mana1",AAPTR_TARGET) >= 92)
                    a_setinventory("mana1",100,AAPTR_TARGET);
                else
                    a_giveinventory("mana1",1,AAPTR_TARGET);
            }
        Crash:
            goto super::Death;
    }

    override void PostBeginPlay()
	{
		Super.PostBeginPlay();
	}

   /*override int DoSpecialDamage(Actor target, int damage, name damagetype)
    {

        //must be handled specially to avoid overfilling player mana
        let pl = self.target.player;
        if(pl)
        {
            if(pl.readyweapon)
            {
                //weaponbase(pl.ReadyWeapon).testmissileprojectile();
                weaponbase(pl.ReadyWeapon).A_HandleResource(weaponbase.WAC_BASIC);
            }
        }
        return super.DoSpecialDamage(target, damage, damagetype);
    }*/
}

