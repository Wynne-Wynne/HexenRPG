//thank you to mr  Matt hideous kojima destructor sir for the shortcutenings
//https://forum.zdoom.org/viewtopic.php?f=39&t=62228
Class WeaponBase : Weapon
{
    //extra stuff for a_weaponready
    enum ComboWeaponConstants
    {
        WRF_ALL = WRF_ALLOWRELOAD|WRF_ALLOWZOOM|
                WRF_ALLOWUSER1|WRF_ALLOWUSER2|
                WRF_ALLOWUSER3|WRF_ALLOWUSER4,
        WRF_NONE = WRF_NOFIRE|WRF_DISABLESWITCH,
    };

    Enum WeaponSoundConstants
    {
        WSC_NOMANA,
        WSC_NOSTAMINA,
    };

    Enum WeaponAttackConstants
    {
        WAC_MAINATTACK,
        WAC_CHARGEATTACK,
        WAC_SECONDARYATTACK,
        WAC_SPECIALATTACK,
        WAC_SUPPORTSKILL,
    }

    Enum WeaponAbilityType
    {
        WAC_NONE,
        WAC_BASIC,
        WAC_THRESHOLD,
        WAC_SPECIAL,
        WAC_ULTIMATE,
    }
    /*
    //boy howdy would i love to have a tuple or a struct for this but
    //le no chicken said it doesnt work that way so fug
    int MainAttackType;

    int ChargeAttackType;

    int SecondaryAttackType;

    int SpecialAttackType;

    int SupportSkillType;


    Property MainAttackType : MainAttackType;
    Property ChargeAttackType : ChargeAttackType;
    Property SecondaryAttackType : SecondaryAttackType;
    Property SpecialAttackType : SpecialAttackType;
    Property SupportSkillType :  SupportSkillType;

    default
    {
        WeaponBase.MainAttackType WAC_BASIC;
        weaponbase.ChargeAttackType WAC_THRESHOLD;
        weaponbase.SecondaryAttackType WAC_THRESHOLD;
        weaponbase.SpecialAttackType WAC_ULTIMATE;
        weaponbase.SupportSkillType WAC_NONE;
    }*/

    action void A_HandleResource(int AttackType)
    {
        //activate global cooldown
        //TODO: replace this with generic playerpawn class that all player
        //classes will inherit from
        if(invoker && invoker.owner)
        {
            paladin(invoker.owner).globalcooldown();
        }
        switch(AttackType)
        {
            case WAC_BASIC:
                if(countinv("mana1") >= 92)
                    setinventory("mana1",100);
                else
                    giveinventory("mana1",4);
                break;
            case WAC_THRESHOLD:
                takeinventory("mana1",20);
                break;
            case WAC_SPECIAL:
                takeinventory("mana1",45);
                break;
            case WAC_ULTIMATE:
                takeinventory("mana1",100);
                break;
        }
    }

    //sets a weapon sprite
    action void SetWeaponState(statelabel st,int layer=PSP_WEAPON)
    {
        if(player) player.setpsprite(layer,invoker.findstate(st));
    }

    //player input checks
    action bool PressingFire(){return player.cmd.buttons & BT_ATTACK;}
    action bool PressingAltfire(){return player.cmd.buttons & BT_ALTATTACK;}
    action bool PressingReload(){return player.cmd.buttons & BT_RELOAD;}
    action bool PressingZoom(){return player.cmd.buttons & BT_ZOOM;}
    action bool PressingUser1(){return player.cmd.buttons & BT_USER1;}
    action bool PressingUser2(){return player.cmd.buttons & BT_USER2;}
    action bool PressingUser3(){return player.cmd.buttons & BT_USER3;}
    action bool PressingUser4(){return player.cmd.buttons & BT_USER4;}

    //useful for combos
    action bool JustPressedFire()
    {
        return (player.cmd.buttons & BT_ATTACK && !(player.oldbuttons & BT_ATTACK));
    }
    action bool JustPressedAltFire()
    {
        return (player.cmd.buttons & BT_ALTATTACK && !(player.oldbuttons & BT_ALTATTACK));
    }

    action state A_CheckAttackResource(int AttackType, statelabel StateSuccess, statelabel StateFail, int PlaySound = 0)
    {
        switch(AttackType)
        {
            case WAC_BASIC:
                return resolvestate(statesuccess);
                break;
            case WAC_THRESHOLD:
                if(countinv("mana1") >= 60)
                    return resolvestate(statesuccess);
                break;
            case WAC_SPECIAL:
                if(countinv("mana1") >= 45)
                    return resolvestate(statesuccess);
                break;
            case WAC_ULTIMATE:
                if(countinv("mana1") >= 100)
                    return resolvestate(statesuccess);
                break;
        }
        switch(playsound)
        {
            case WSC_NOMANA:
            a_startsound("nomana",0,CHANF_OVERLAP|CHANF_LOCAL);
            break;
            case WSC_NOSTAMINA:
            default:
            break;
        }
        return resolvestate(statefail);
    }

    // customizable version for checking individual costs of any inventory item
    // no function overloading with the previous one because le no chicken
    action state A_CheckResource(int cost, class<Inventory> resource, statelabel statesuccess, statelabel statefail, int playsound = 0)
    {
        if(countinv(resource) > cost)
        {
            return resolvestate(statesuccess);
        }
        switch(playsound)
        {
            case WSC_NOMANA:
            a_startsound("nomana",0,CHANF_OVERLAP|CHANF_LOCAL);
            break;
            case WSC_NOSTAMINA:
            default:
            break;
        }
        return resolvestate(statefail);

    }

    //hard-coded to basic attack, hope this works
    action state A_CheckComboContinue(int attackType, statelabel ComboContinueState, statelabel AltComboContinueState)
    {

        if(JustPressedfire())
        {
            return a_checkattackresource(attackTYPE,ComboContinueState,null);
        }
        if(JustPressedaltfire())
        {
            return a_checkattackresource(attackTYPE,AltComboContinueState,null);
        }
        return resolvestate(null);
    }
}