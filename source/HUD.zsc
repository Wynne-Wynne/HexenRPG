class HexenRPGHud : BaseStatusBar
{
    HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mNumHud;
    HUDFont smallfont;
	InventoryBarState diparms;
	InventoryBarState diparms_sbar;
    DynamicValueInterpolator mHealthInterpolator, mManaInterpolator;//, mStaminaInterpolator;
    Array<string> keys;
    int glowIndex;
    Vector2 Ability1Pos;
    Vector2 Ability2Pos;
    Vector2 Ability3Pos;
    Vector2 Ability4Pos;

    Enum attackTypes
    {
        WAC_BAS,
        WAC_MAN,
        WAC_THR,
        WAC_SPEC,
        WAC_ULT,
    }

    override void Init()
	{
		Super.Init();
		SetSize(44, 320, 200);

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_RAVEN";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0") + 1, Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_RAVEN";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);

        fnt = "indexfont";
		mNumHud = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 0, 0);

        fnt = "SMALLFONT";
        smallfont = HUDFont.Create(fnt);

		diparms = InventoryBarState.Create(mIndexFont);
		diparms_sbar = InventoryBarState.CreateNoBox(mIndexFont, boxsize:(31, 31), arrowoffs:(0,-10));

		mHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
        mManaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
        //mStaminaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);


        // key binds


        keys.push(Bindings.namekeys(Bindings.GetKeysForCommand("+attack"),0));
        keys.push(Bindings.namekeys(Bindings.GetKeysForCommand("+altattack"),0));
        keys.push(Bindings.namekeys(Bindings.GetKeysForCommand("+reload"),0));
        keys.push(Bindings.namekeys(Bindings.GetKeysForCommand("+zoom"),0));


        for(int i = 0;i<4;i++)
        {
            if(keys[i].Length() > 1)
                keys[i] = keys[i].left(1)..keys[i].mid(keys[i].Length()-1,1);
        }

        // used to alternate between ability proc frame
        glowIndex = 0;

        // location of ability icons
        ability1Pos = (-72.8,-35);
        ability2Pos = (-35.25,-35);
        ability3Pos = (1.95,-35);
        ability4Pos = (39,-35);
	}


	override void Draw (int state, double TicFrac)
	{
        completeborder = true;
		Super.Draw (state, TicFrac);
        if (state == HUD_StatusBar)
		{
			//BeginStatusBar();
			//DrawMainBar(TicFrac);
            //drawfullscreenstuff();
		}
		else if (state == HUD_Fullscreen)
		{
			BeginHUD();
			DrawFullScreenStuff ();
		}
	}

    void DrawMainBar(double TicFrac) {
        DrawImage("HBAR", (-16, 135), DI_ITEM_OFFSETS|DI_ITEM_CENTER);
	}

    override void NewGame ()
	{
		Super.NewGame();
		mHealthInterpolator.Reset (0);
        mManaInterpolator.Reset (0);
        //mStaminaInterpolator.Reset (0);
    }

    override void Tick()
	{
		Super.Tick();
		mHealthInterpolator.Update(CPlayer.health);
        Inventory man = CPlayer.mo.FindInventory("Mana1");
                 //stam = CPlayer.mo.FindInventory("Mana2");
		if (man) mManaInterpolator.Update(man.Amount);
       // if (stam) mStaminaInterpolator.Update(stam.Amount);

    }

    void DrawOrbs()
    {
        drawbar("horb","norb",mhealthinterpolator.getvalue(),100,(-129,-45),0,3,DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
        drawbar("morb","norb2",mManaInterpolator.getvalue(),200,(79,-45),0,3,DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);

      //  drawbar("sorb","norb2",mStaminaInterpolator.getvalue(),200,(107,-45),0,3,DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
        DrawImage("HBAR", (-176, -65), DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
    }

    void drawAbility(string Icon, Vector2 Location,int AttackType, int keybind)
    {
        if(CPLAYER.cmd.Buttons & keybind)
        {
            Location = (Location.X+.5, Location.Y+0.5);
        }
        let drawflags = DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM;


        if (CPLAYER.mo.findinventory("mana1"))
        {
            switch(AttackType)
            {
                case WAC_MAN:
                    if(CPlayer.mo.findinventory("mana1").amount < 8 )
                    {
                        drawflags = drawflags|DI_DIM;
                    }
                    break;
                case WAC_THR:
                    if(CPlayer.mo.findinventory("mana1").amount < 20 )
                    {
                        drawflags = drawflags|DI_DIM;
                    }
                    break;
                case WAC_SPEC:
                    if(CPlayer.mo.findinventory("mana1").amount < 45 )
                    {
                        drawflags = drawflags|DI_DIM;
                    }
                    break;
                case WAC_ULT:
                    if(CPlayer.mo.findinventory("mana1").amount < 80 )
                    {
                        drawflags = drawflags|DI_DIM;
                    }
                    break;
            }
        }
        else if (AttackType != WAC_BAS)
            drawflags = drawflags|DI_DIM;
        DrawImage(Icon, Location, drawflags);
    }

    void drawCooldown(string cooldownPowerup, Vector2 radMaskPos, Vector2 numPos,Vector2 FlashLocation = (0,0),string childPowerUp = "")
    {
        // mismatched aura cooldown takes priority (have aura-length cooldown but aura is off)
        if(CPLAYER.mo.findinventory(childPowerUp))
            cooldownPowerup = childPowerUp;

        if(CPLAYER.mo.findinventory(cooldownPowerup))
        {
            int ticsleft,maxduration;
            [ticsleft,maxduration] = CPLAYER.mo.geteffectticsforitem(cooldownPowerup.mid(5));
            drawRadialMask(ticsleft*100 / maxduration ,radMaskPos);
            let secondsleft = Formatnumber((ticsleft+35)/35);
            if(ticsleft < 30 && FlashLocation != (0,0))
            {
                let alpha = (ticsleft>=3) ? (3/ticsleft) : ticsleft/3;
                readyFlash(FlashLocation,alpha-0.5);
            }


            DrawString(mNumHud, secondsleft, numPos,DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
        }
    }
    void readyFlash(Vector2 Location, float flashAlpha)
    {
        DrawImage("flash", Location, DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM,flashAlpha);
    }

    void DrawprocGlow(string glowpowerup, Vector2 Location)
    {
        if(CPLAYER.mo.findinventory(glowpowerup))
        {
            if(glowIndex >= 14) glowIndex = 0;
            let frame = "";
            switch(glowIndex)
            {
                case 0:
                Case 1:
                case 2:
                case 3:
                case 4:
                    frame = "glow1";
                    break;

                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    frame = "glow2";
                    break;
                case 10:
                case 11:
                case 12:
                case 13:
                    frame = "glow3";
                    break;
            }
            DrawImage(frame,Location,DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
            glowIndex++;
        }
    }

	protected void DrawFullScreenStuff ()
	{
        DrawOrbs();

		// hud numbers
        // should make these optional with a cvar or somehting
		DrawString(mNumHud, FormatNumber(mHealthInterpolator.GetValue()), (-115, -20),DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
        DrawString(mNumHud, FormatNumber(mManaInterpolator.GetValue()), (90, -20), DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
        //DrawString(mNumHud, FormatNumber(mStaminaInterpolator.GetValue()), (110, -20), DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);



        let wieldedWeapon = Weapon(CPlayer.ReadyWeapon);
		if (wieldedWeapon)
		{
            let wep = wieldedWeapon.gettag();
            let w = WeaponBase(wieldedWeapon);
            if(wep == "Mace of Attrition")
            {
                DrawAbility("PENCA0", ability1Pos, WAC_BAS, BT_ATTACK);
                DrawProcGlow("PowerProcCooldown",(-74.8,-37));
                DrawCoolDOwn("PowerCombo1Cooldown", (-112,-52), (-46.75,-16), (-72.8,-35));
                DrawCoolDOwn("PowerRaiseCooldown", (-112,-52), (-46.75,-16), (-72.8,-35));
                DrawCoolDOwn("PowerCombo2Cooldown", (-112,-52), (-46.75,-16), (-72.8,-35));
                DrawCoolDOwn("PowerLowerCooldown", (-112,-52), (-46.75,-16), (-72.8,-35));
                DrawCoolDOwn("PowerCombo3Cooldown", (-112,-52), (-46.75,-16), (-72.8,-35));

                DrawAbility("SHOVA0", ability2Pos, WAC_BAS, BT_ALTATTACK);
                DrawCoolDown("PowerShoveCooldown", (-36.5,-52), (-9.2, -16),(-36.5,-35));
                if(CPLAYER.mo.findinventory("FixationAura"))
                {
                    DrawAbility("PTRAA0", ability3Pos, WAC_ULT, BT_RELOAD);
                    DrawCooldown("powerPetrifyCooldown",(38.4,-52),(28, -16),(1.95,-35),"powerPetrifyCooldownShort");

                    // Draw border on selected aura
                    let auralpha = (4+sin(9*gametic))/7;
                    DrawImage("AAUR", (37,-37), DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM,auralpha);
                }
                else
                {
                    DrawAbility("PTRIA0", ability3Pos, WAC_spec, BT_RELOAD);
                    DrawCooldown("powerPetrifyCooldownshort",(38.8,-52),(28, -16),(1.95,-35),"powerPetrifyCooldown");
                }
                DrawAbility("PAURA0",ability4Pos,0, BT_ZOOM);
            }
            else if(wep == "Serpent Staff")
            {
                DrawAbility("SSSBA0", ability1Pos, WAC_MAN, BT_ATTACK);
                DrawAbility("CSTRKA0", ability2Pos, WAC_THR, BT_ALTATTACK);
                DrawCoolDown("Powerbitecooldown", (-36.5,-52), (-9.2, -16),(-36.5,-35));

                if(CPLAYER.mo.findinventory("PutrefactionAura"))
                {
                    DrawAbility("CBLAB0", ability3Pos, WAC_ULT, BT_RELOAD);
                    DrawCooldown("powerCorruptionCooldown",(38.4,-52),(28, -16),(1.95,-35),"powerCorruptionCooldownShort");

                    // Draw border on selected aura
                    let auralpha = (4+sin(9*gametic))/7;
                    DrawImage("AAUR", (37,-37), DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM,auralpha);
                }
                else
                {
                    DrawAbility("CBLAA0", ability3Pos, WAC_SPEC, BT_RELOAD);
                    DrawCooldown("powerCorruptionCooldownshort",(38.8,-52),(28, -16),(1.95,-35),"powerCorruptionCooldown");
                }
                 DrawAbility("RAURA0",ability4Pos,0, BT_ZOOM);
            }

        }
        // Draw ability keybinds
        let drawflags = DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM;
        DrawString(smallfont,keys[0],(-72.8,-35),drawflags);
        DrawString(smallfont,keys[1],(-35.25,-35),drawflags);
        DrawString(smallfont,keys[2],(1.95,-35),drawflags);
        DrawString(smallfont,keys[3],(39,-35),drawflags);

	}
    void drawRadialMask(float percentage, Vector2 pos)
    {
        let angle = percentage * 3.6;
        let tex = texman.checkfortexture("cdown");
        if(angle > 0)
        {
            let tr = calcTriangle(angle>45?45:angle, false, pos);
            Screen.DrawShape(tex, false,tr);
        }
        if(angle > 45)
        {
           let tr = calcTriangle(angle>90?90:angle, true, pos);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 90)
        {
           let tr = calcTriangle(angle>135?135:angle, false, pos);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 135)
        {
           let tr = calcTriangle(angle>180?180:angle, true, pos);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 180)
        {
           let tr = calcTriangle(angle>225?225:angle, false, pos);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 225)
        {
           let tr = calcTriangle(angle>270?270:angle, true, pos);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 270)
        {
           let tr = calcTriangle(angle>315?315:angle, false, pos);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 315)
        {
           let tr = calcTriangle(angle>360?360:angle, true, pos);
           Screen.DrawShape(tex, false,tr);
        }
    }

    Shape2D calcTriangle(float angle, bool flip, Vector2 pos)
    {
        // base scale for 1080p resolution
        let basescale = 14.1666667;
        let hudscale = gethudscale();
        let vscale = basescale*hudscale.y; //size of mask

        let posScale = vscale / (2.4 * basescale); //scaling of position

        let tr = new("Shape2D");
        tr.pushvertex((0,0)); //always have one vertex in origin
        tr.pushvertex((flip?1:0,-1));
        let rotation = flip?45:0;

        let factor = angle/45;
        for(int i = 1;i<factor; i++)
        {
            rotation +=45;
            angle -=45;
        }

        if(flip)
            tr.pushvertex((Angle>45?0:1-tan(Angle) ,-1));
        else
            tr.pushvertex((Angle>45?-1:-tan(Angle) ,-1));

        tr.pushcoord((0,0));
        tr.pushcoord((0,1));
        tr.pushcoord((1,1));

        tr.pushtriangle(0,1,2);

        let tran = new("Shape2DTransform");
        tran.scale((vscale,vscale));
        tran.rotate(-rotation);

        tran.Translate(((Screen.getWidth()/2)+(pos.X * posscale), Screen.getHeight()+(pos.Y * posscale) ) );

        tr.setTransform(tran);
        return tr;
    }

}

