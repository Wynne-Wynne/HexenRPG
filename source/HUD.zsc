class HexenRPGHud : BaseStatusBar
{
    HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mNumHud;
    HUDFont smallfont;
	InventoryBarState diparms;
	InventoryBarState diparms_sbar;
    DynamicValueInterpolator mHealthInterpolator, mManaInterpolator, mStaminaInterpolator;
    Array<string> keys;

    override void Init()
	{
		Super.Init();
		SetSize(44, 320, 200);

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_RAVEN";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0") + 1, Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_RAVEN";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);

        fnt = "indexfont";
		mNumHud = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 0, 0);

        fnt = "SMALLFONT";
        smallfont = HUDFont.Create(fnt);

		diparms = InventoryBarState.Create(mIndexFont);
		diparms_sbar = InventoryBarState.CreateNoBox(mIndexFont, boxsize:(31, 31), arrowoffs:(0,-10));

		mHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
        mManaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
        mStaminaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);


        // key binds


        keys.push(Bindings.namekeys(Bindings.GetKeysForCommand("+attack"),0));
        keys.push(Bindings.namekeys(Bindings.GetKeysForCommand("+altattack"),0));
        keys.push(Bindings.namekeys(Bindings.GetKeysForCommand("+reload"),0));
        keys.push(Bindings.namekeys(Bindings.GetKeysForCommand("+zoom"),0));


        for(int i = 0;i<4;i++)
        {
            if(keys[i].Length() > 1)
                keys[i] = keys[i].left(1)..keys[i].mid(keys[i].Length()-1,1);
        }


	}


	override void Draw (int state, double TicFrac)
	{
        completeborder = true;
		Super.Draw (state, TicFrac);
        if (state == HUD_StatusBar)
		{
			BeginStatusBar();
			DrawMainBar(TicFrac);
            //drawfullscreenstuff();
		}
		else if (state == HUD_Fullscreen)
		{
			BeginHUD();
			DrawFullScreenStuff ();
		}
	}

    void DrawMainBar(double TicFrac) {
        DrawImage("HBAR", (-16, 135), DI_ITEM_OFFSETS|DI_ITEM_CENTER);
	}

    override void NewGame ()
	{
		Super.NewGame();
		mHealthInterpolator.Reset (0);
        mManaInterpolator.Reset (0);
        mStaminaInterpolator.Reset (0);
    }

    override void Tick()
	{
		Super.Tick();
		mHealthInterpolator.Update(CPlayer.health);
        Inventory man = CPlayer.mo.FindInventory("Mana1"),
                stam = CPlayer.mo.FindInventory("Mana2");
		if (man) mManaInterpolator.Update(man.Amount);
        if (stam) mStaminaInterpolator.Update(stam.Amount);

    }

	protected void DrawFullScreenStuff ()
	{

        drawbar("horb","norb",mhealthinterpolator.getvalue(),100,(-129,-45),0,3,DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);

        drawbar("morb","norb2",mManaInterpolator.getvalue(),200,(79,-45),0,3,DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
        drawbar("sorb","norb2",mStaminaInterpolator.getvalue(),200,(107,-45),0,3,DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);

        DrawImage("HBAR", (-176, -65), DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);

		// hud numbers
        // should make these optional with a cvar or somehting
		//DrawString(mNumHud, FormatNumber(mHealthInterpolator.GetValue()), (-115, -20),DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
        //DrawString(mNumHud, FormatNumber(mManaInterpolator.GetValue()), (90, -20), DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);
        //DrawString(mNumHud, FormatNumber(mStaminaInterpolator.GetValue()), (110, -20), DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM);



        let drawflags = DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM;
        let drawflags_int = drawflags;
        let wep = Weapon(CPlayer.ReadyWeapon);
		if (wep)
		{
            if(wep.gettag() == "Mace of Attrition")
            {
                //flags to dim icon if there is insufficient mana to use them
                if(CPLAYER.mo.findinventory("mana2").amount < 5)
                {
                    drawflags = drawflags|DI_DIM;
                }
                let drawflags2 = DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM;
                if(CPLAYER.mo.findinventory("mana2").amount < 13)
                {
                    drawflags2 = drawflags|DI_DIM;
                }
                let drawflags3 = DI_ITEM_OFFSETS|DI_SCREEN_CENTER_BOTTOM;
                if(CPLAYER.mo.findinventory("mana1").amount < 40)
                {
                    drawflags3 = drawflags|DI_DIM;
                }
                // Draw ability icons
                DrawImage("PENCA0", (-72.8,-35),drawflags);
                DrawImage("SHOVA0", (-35.25,-35),drawflags2);
                if(CPLAYER.mo.findinventory("FixationAura"))
                {
                    DrawImage("PTRAA0", (1.95,-35),drawflags3);
                }
                else
                {
                    DrawImage("PTRIA0", (1.95,-35),drawflags3);
                }
                DrawImage("PAURA0", (39,-35),drawflags_int);

            }
        }
        // Draw ability bindings
        DrawString(smallfont,keys[0],(-72.8,-35),drawflags_int);
        DrawString(smallfont,keys[1],(-35.25,-35),drawflags_int);
        DrawString(smallfont,keys[2],(1.95,-35),drawflags_int);
        DrawString(smallfont,keys[3],(39,-35),drawflags_int);


        drawRadialMask(mManaInterpolator.getvalue()/2 ,0,0);
	}
    void drawRadialMask(float percentage, float xpos, float ypos)
    {
        let angle = percentage * 3.6;
        let tex = texman.checkfortexture("PAURA0");
        if(angle > 0)
        {
            let tr = calcTriangle(angle>45?45:angle, false);
            Screen.DrawShape(tex, false,tr);


        }
        if(angle > 45)
        {
           let tr = calcTriangle(angle>90?90:angle, true);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 90)
        {
           let tr = calcTriangle(angle>135?135:angle, false);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 135)
        {
           let tr = calcTriangle(angle>180?180:angle, true);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 180)
        {
           let tr = calcTriangle(angle>225?225:angle, false);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 225)
        {
           let tr = calcTriangle(angle>270?270:angle, true);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 270)
        {
           let tr = calcTriangle(angle>315?315:angle, false);
           Screen.DrawShape(tex, false,tr);
        }
        if(angle > 315)
        {
           let tr = calcTriangle(angle>360?360:angle, true);
           Screen.DrawShape(tex, false,tr);
        }
    }

    Shape2D calcTriangle(float angle, bool flip)
    {
        let tr = new("Shape2D");
        tr.pushvertex((0,0)); //always have one vertex in origin
        tr.pushvertex((flip?1:0,-1));
        let rotation = flip?45:0;

        let factor = angle/45;
        for(int i = 1;i<factor; i++)
        {
            rotation +=45;
            angle -=45;
        }

        if(flip)
            tr.pushvertex((Angle>45?0:1-tan(Angle) ,-1));
        else
            tr.pushvertex((Angle>45?-1:-tan(Angle) ,-1));


        tr.pushcoord((0,0));
        tr.pushcoord((0,1));
        tr.pushcoord((1,1));

        tr.pushtriangle(0,1,2);

        let tran = new("Shape2DTransform");
        tran.scale((100,100));
        tran.rotate(-rotation);

        tran.Translate((Screen.GetWidth()/2, Screen.GetHeight()/2));

        tr.setTransform(tran);
        return tr;
    }

}

